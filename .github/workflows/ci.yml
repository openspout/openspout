name: CI

on:
  pull_request:
  push:

jobs:
  composer-json-lint:
    name: "Lint composer.json"

    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        php-version:
          - "8.1"
          - "8.2"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3"

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: ${{ matrix.code-coverage }}
          php-version: ${{ matrix.php-version }}
          extensions: zip, xmlreader, dom
          ini-values: zend.assertions=1
          tools: composer-normalize, composer-require-checker, composer-unused

      - name: "Get composer cache directory"
        id: "composercache"
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: "Cache dependencies"
        uses: "actions/cache@v2"
        with:
          path: ${{ steps.composercache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ matrix.dependencies }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ matrix.dependencies }}-composer-

      - name: "Install dependencies"
        run: "composer update --no-interaction --no-progress"

      - name: "Validate composer.json"
        run: "composer validate --strict"

      - name: "Normalize composer.json"
        run: "composer-normalize --dry-run"

      - name: "composer-require-checker"
        run: "composer-require-checker --config-file=$(realpath .require-checker-config.json)"

      - name: "composer-unused"
        run: "composer-unused"

  tests:
    name: "Tests"

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os:
          - "ubuntu-latest"
        php-version:
          - "7.3"
          - "7.4"
          - "8.0"
        code-coverage:
          - "none"
        include:
            - os: "windows-latest"
              php-version: "8.1"
              code-coverage: "none"
            - os: "ubuntu-latest"
              php-version: "8.1"
              code-coverage: "pcov"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3"

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: ${{ matrix.code-coverage }}
          php-version: ${{ matrix.php-version }}
          extensions: zip, xmlreader, dom
          ini-values: zend.assertions=1

      - name: "Get composer cache directory"
        id: "composercache"
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: "Cache dependencies"
        uses: "actions/cache@v2"
        with:
          path: ${{ steps.composercache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ matrix.dependencies }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ matrix.dependencies }}-composer-

      - name: "Install dependencies"
        run: "composer update --no-interaction --no-progress"

      - name: "Run tests"
        if: ${{ matrix.code-coverage == 'none' }}
        timeout-minutes: 3
        run: "vendor/bin/phpunit --no-coverage --no-logging"

      - name: "Run tests"
        if: ${{ matrix.code-coverage != 'none' }}
        timeout-minutes: 3
        run: "vendor/bin/phpunit --coverage-clover=coverage.xml"

      - name: "Send code coverage report to Codecov.io"
        if: ${{ matrix.code-coverage != 'none' }}
        uses: codecov/codecov-action@v2.1.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          fail_ci_if_error: true

  coding-standards:
    name: "Coding Standards"

    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        php-version:
          - "8.1"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3"

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: "none"
          php-version: ${{ matrix.php-version }}
          extensions: zip, xmlreader, dom
          ini-values: zend.assertions=1

      - name: "Get composer cache directory"
        id: "composercache"
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: "Cache dependencies"
        uses: "actions/cache@v2"
        with:
          path: ${{ steps.composercache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ matrix.dependencies }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ matrix.dependencies }}-composer-

      - name: "Install dependencies"
        run: "composer update --no-interaction --no-progress"

      - name: "Run PHP-CS-Fixer"
        run: "vendor/bin/php-cs-fixer fix --verbose --dry-run --diff"

  static-analysis:
    name: "Static Analysis"

    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        php-version:
          - "8.1"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v3"

      - name: "Install PHP"
        uses: "shivammathur/setup-php@v2"
        with:
          coverage: "none"
          php-version: ${{ matrix.php-version }}
          extensions: zip, xmlreader, dom
          ini-values: zend.assertions=1
          tools: cs2pr

      - name: "Get composer cache directory"
        id: "composercache"
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: "Cache dependencies"
        uses: "actions/cache@v2"
        with:
          path: ${{ steps.composercache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ matrix.dependencies }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ matrix.dependencies }}-composer-

      - name: "Install dependencies"
        run: "composer update --no-interaction --no-progress"

      - name: "Run static analysis"
        run: "vendor/bin/phpstan analyse --no-progress --error-format=checkstyle | cs2pr"
